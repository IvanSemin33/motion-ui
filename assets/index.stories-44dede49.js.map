{"version":3,"file":"index.stories-44dede49.js","sources":["../../src/components/Breadcrumbs/index.tsx"],"sourcesContent":["import { HTMLAttributes } from 'react'\n\nimport classNames from 'classnames'\n\nimport styles from './index.module.scss'\n\nimport wrapper from '../../utils/wrapper'\n\nexport interface IBreadcrumbsOwnProps extends HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode[]\n  maxItems?: number\n  isFetching?: boolean\n}\n\nexport type TBreadcrumbsRef = HTMLDivElement\n\nconst defaultProps = {\n  maxItems: 8,\n  isFetching: false,\n}\n\nconst Breadcrumbs = wrapper<TBreadcrumbsRef, IBreadcrumbsOwnProps>(\n  ({ children, maxItems = 8, isFetching, className, ...containerProps }, ref) => {\n    const startItemsCount = Math.floor(maxItems / 2)\n    const endItemsCount = maxItems - startItemsCount\n\n    const ellipsisIndex = startItemsCount\n    const endItemsIndex = children.length - endItemsCount\n\n    const renderSeparator = (index: number) => {\n      return (\n        <span key={`${index}-separator`} className={styles.separator}>\n          /\n        </span>\n      )\n    }\n\n    const renderCrumb = (child: React.ReactNode, index: number) => {\n      if (maxItems && maxItems < children.length) {\n        if (index < ellipsisIndex) {\n          return (\n            <div className={styles.crumb} key={index}>\n              {child}\n              {renderSeparator(index)}\n            </div>\n          )\n        }\n        if (index === ellipsisIndex) {\n          return <div className={styles.ellipsis}>...</div>\n        }\n        if (index > ellipsisIndex && index < endItemsIndex) {\n          return null\n        }\n        if (index >= endItemsIndex) {\n          return (\n            <div className={styles.crumb} key={index}>\n              {renderSeparator(index)}\n              {child}\n            </div>\n          )\n        }\n      } else {\n        return (\n          <div className={styles.crumb} key={index}>\n            {child}\n            {index !== children.length - 1 && renderSeparator(index)}\n          </div>\n        )\n      }\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={classNames(styles.container, isFetching && styles.isFetching, className)}\n        {...containerProps}\n      >\n        {children.map(renderCrumb)}\n      </div>\n    )\n  }\n)\n\nBreadcrumbs.defaultProps = defaultProps\n\nexport interface IBreadcrumbsProps extends React.ComponentProps<typeof Breadcrumbs> {}\n\nexport default Breadcrumbs\n"],"names":["defaultProps","Breadcrumbs","wrapper","children","maxItems","isFetching","className","containerProps","ref","startItemsCount","endItemsCount","ellipsisIndex","endItemsIndex","renderSeparator","index","jsx","styles","renderCrumb","child","jsxs","classNames","Breadcrumbs$1"],"mappings":"2jBAgBAA,EAAA,CAAqB,SAAA,EACT,WAAA,EAEZ,EAEAC,EAAAC,EAAoB,CAAA,CAAA,SAAAC,EAAA,SAAAC,EAAA,EAAA,WAAAC,EAAA,UAAAC,EAAA,GAAAC,CAAA,EAAAC,IAAA,CAEhB,MAAAC,EAAA,KAAA,MAAAL,EAAA,CAAA,EACAM,EAAAN,EAAAK,EAEAE,EAAAF,EACAG,EAAAT,EAAA,OAAAO,EAEAG,EAAAC,GACEC,EAAA,IAAA,OAAA,CAAA,UAAAC,EAAA,UAAA,SAAA,GAAA,EAAA,GAAAF,CAAA,YAAA,EAOFG,EAAA,CAAAC,EAAAJ,IAAA,CACE,GAAAV,GAAAA,EAAAD,EAAA,OAAA,CACE,GAAAW,EAAAH,EACE,OAAAQ,EAAAA,KAAA,MAAA,CAAA,UAAAH,EAAA,MAAA,SAAA,CAEKE,EAAAL,EAAAC,CAAA,CACqB,CAAA,EAAAA,CAAA,EAI5B,GAAAA,IAAAH,EACE,OAAAI,EAAA,IAAA,MAAA,CAAA,UAAAC,EAAA,SAAA,SAAA,KAAA,CAAA,EAEF,GAAAF,EAAAH,GAAAG,EAAAF,EACE,OAAA,KAEF,GAAAE,GAAAF,EACE,OAAAO,EAAAA,KAAA,MAAA,CAAA,UAAAH,EAAA,MAAA,SAAA,CAEKH,EAAAC,CAAA,EAAqBI,CACrB,CAAA,EAAAJ,CAAA,CAGP,KAEA,QAAAK,EAAAA,KAAA,MAAA,CAAA,UAAAH,EAAA,MAAA,SAAA,CAEKE,EAAAJ,IAAAX,EAAA,OAAA,GAAAU,EAAAC,CAAA,CACsD,CAAA,EAAAA,CAAA,EAI7D,OAAA,IAAO,EAGT,OAAAC,EAAA,IACE,MAAC,CAAA,IAAAP,EACC,UAAAY,EAAAJ,EAAA,UAAAX,GAAAW,EAAA,WAAAV,CAAA,EACkF,GAAAC,EAC9E,SAAAJ,EAAA,IAAAc,CAAA,CAEqB,CAAA,CAC3B,CAGN,EAEAhB,EAAA,aAAAD,EAIA,MAAAqB,EAAApB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}