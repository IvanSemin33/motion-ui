{"version":3,"file":"index.stories-90d24e09.js","sources":["../../src/components/ToggleButtonGroup/index.tsx"],"sourcesContent":["import { Children, cloneElement, isValidElement } from 'react'\n\nimport classNames from 'classnames'\nimport { HTMLMotionProps, motion } from 'framer-motion'\n\nimport styles from './index.module.scss'\n\nimport wrapper from '../../utils/wrapper'\nimport ToggleButton, {\n  EToggleButtonColors,\n  EToggleButtonSizes,\n  EToggleButtonVariants,\n  IToggleButtonProps,\n} from '../ToggleButton'\n\nexport const EToggleButtonGroupColors = EToggleButtonColors\nexport type EToggleButtonGroupColors = EToggleButtonColors\n\nexport const EToggleButtonGroupVariants = EToggleButtonVariants\nexport type EToggleButtonGroupVariants = EToggleButtonVariants\n\nexport const EToggleButtonGroupSizes = EToggleButtonSizes\nexport type EToggleButtonGroupSizes = EToggleButtonSizes\n\ntype TValue = string | string[]\n\nexport interface IToggleButtonGroupOwnProps extends Omit<HTMLMotionProps<'div'>, 'onChange'> {\n  children: React.ReactNode\n  className?: string\n  color?: EToggleButtonGroupColors\n  customColor?: IToggleButtonProps['customColor']\n  disabled?: boolean\n  exclusive?: boolean\n  isFetching?: boolean\n  label?: string\n  loading?: IToggleButtonProps['loading']\n  onChange?: (value: TValue) => void\n  size?: EToggleButtonGroupSizes\n  value?: TValue\n  variant?: EToggleButtonGroupVariants\n}\n\nexport type TToggleButtonGroupRef = HTMLDivElement\n\nconst ToggleButtonGroup = wrapper<TToggleButtonGroupRef, IToggleButtonGroupOwnProps>(\n  (\n    {\n      children,\n      className,\n      color,\n      customColor,\n      disabled,\n      exclusive,\n      isFetching,\n      label,\n      loading,\n      onChange,\n      size,\n      value,\n      variant,\n      ...containerProps\n    },\n    ref\n  ) => {\n    const renderChildren = () => {\n      return (\n        <div className={styles.buttons}>\n          {Children.map(children, (child) => {\n            if (!isValidElement(child)) return null\n\n            if (child.type !== ToggleButton) {\n              throw new Error('`ToggleButtonGroup` children should be of type `ToggleButton`.')\n            }\n\n            const ToggleButtonComponent = child as React.ReactElement<IToggleButtonProps>\n            const { props: childProps } = ToggleButtonComponent\n\n            return cloneElement(ToggleButtonComponent, {\n              color,\n              customColor,\n              disabled,\n              size,\n              variant,\n              loading,\n              isFetching,\n              selected: exclusive ? value === childProps.value : value?.includes(childProps.value),\n              onClick: () => {\n                if (onChange) {\n                  if (exclusive) {\n                    onChange(childProps.value)\n                  } else {\n                    const newValue = value as string[]\n                    onChange(\n                      newValue.includes(childProps.value)\n                        ? newValue.filter((v) => v !== childProps.value)\n                        : [...newValue, childProps.value]\n                    )\n                  }\n                }\n              },\n            })\n          })}\n        </div>\n      )\n    }\n\n    return (\n      <motion.div ref={ref} {...containerProps} className={classNames(styles.container, className)}>\n        {label && <label className={styles.label}>{label}</label>}\n        {renderChildren()}\n      </motion.div>\n    )\n  }\n)\n\nToggleButtonGroup.defaultProps = {\n  color: EToggleButtonGroupColors.PRIMARY,\n  disabled: false,\n  exclusive: false,\n  isFetching: false,\n  loading: false,\n  size: EToggleButtonGroupSizes.MEDIUM,\n  variant: EToggleButtonGroupVariants.CONTAINED,\n}\n\nexport interface IToggleButtonGroupProps extends React.ComponentProps<typeof ToggleButtonGroup> {}\n\nexport default ToggleButtonGroup\n"],"names":["EToggleButtonGroupColors","EToggleButtonColors","EToggleButtonGroupVariants","EToggleButtonVariants","EToggleButtonGroupSizes","EToggleButtonSizes","ToggleButtonGroup","wrapper","children","className","color","customColor","disabled","exclusive","isFetching","label","loading","onChange","size","value","variant","containerProps","ref","renderChildren","jsx","styles","Children","child","isValidElement","ToggleButton","ToggleButtonComponent","childProps","cloneElement","newValue","v","jsxs","motion","classNames"],"mappings":"ipBAeOA,EAAAC,GAGAC,EAAAC,GAGAC,EAAAC,GAuBPC,EAAAC,GAA0B,CAAA,CAEtB,SAAAC,EACE,UAAAC,EACA,MAAAC,EACA,YAAAC,EACA,SAAAC,EACA,UAAAC,EACA,WAAAC,EACA,MAAAC,EACA,QAAAC,GACA,SAAAC,EACA,KAAAC,GACA,MAAAC,EACA,QAAAC,GACA,GAAAC,EACG,EAAAC,KAAA,CAIL,MAAAC,GAAA,IACEC,MAAA,MAAA,CAAA,UAAAC,EAAA,QAAA,SAAAC,WAAA,IAAAlB,EAAAmB,GAAA,CAGM,GAAA,CAAAC,EAAA,eAAAD,CAAA,EAA4B,OAAA,KAE5B,GAAAA,EAAA,OAAAE,EACE,MAAA,IAAA,MAAA,gEAAA,EAGF,MAAAC,EAAAH,EACA,CAAA,MAAAI,CAAA,EAAAD,EAEA,OAAAE,EAAAA,aAAAF,EAAA,CAA2C,MAAApB,EACzC,YAAAC,EACA,SAAAC,EACA,KAAAM,GACA,QAAAE,GACA,QAAAJ,GACA,WAAAF,EACA,SAAAD,EAAAM,IAAAY,EAAA,MAAAZ,GAAA,YAAAA,EAAA,SAAAY,EAAA,OACmF,QAAA,IAAA,CAEjF,GAAAd,EACE,GAAAJ,EACEI,EAAAc,EAAA,KAAA,MAAyB,CAEzB,MAAAE,EAAAd,EACAF,EAAAgB,EAAA,SAAAF,EAAA,KAAA,EAAAE,EAAA,OAAAC,IAAAA,KAAAH,EAAA,KAAA,EAAA,CAAA,GAAAE,EAAAF,EAAA,KAAA,CAGoC,CACpC,CAEJ,CACF,CAAA,CACD,CAAA,CAAA,CAAA,EAMT,OAAAI,EAAA,KAAAC,GAAA,IAAA,CAAA,IAAAd,GAAA,GAAAD,GAAA,UAAAgB,GAAAZ,EAAA,UAAAhB,CAAA,EAAA,SAAA,CAEKM,GAAAS,EAAAA,IAAA,QAAA,CAAA,UAAAC,EAAA,MAAA,SAAAV,EAAA,EAAgDQ,GAAA,CACjC,CAAA,CAAA,CAClB,CAGN,EAEAjB,EAAA,aAAA,CAAiC,MAAAN,EAAA,QACC,SAAA,GACtB,UAAA,GACC,WAAA,GACC,QAAA,GACH,KAAAI,EAAA,OACqB,QAAAF,EAAA,SAEhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}