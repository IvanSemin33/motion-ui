{"version":3,"file":"index.stories-5027091e.js","sources":["../../src/components/TextArea/index.tsx"],"sourcesContent":["import React, { useState } from 'react'\n\nimport classNames from 'classnames'\n\nimport styles from './index.module.scss'\n\nimport wrapper from '../../utils/wrapper'\n\nexport enum ETextAreaColors {\n  PRIMARY = 'primary',\n  SUCCESS = 'success',\n  ERROR = 'error',\n}\n\nexport enum ETextAreaVariants {\n  STANDARD = 'standard',\n  FILLED = 'filled',\n  OUTLINED = 'outlined',\n}\n\nexport interface ITextAreaOwnProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  color?: ETextAreaColors\n  disabled?: boolean\n  helperText?: string\n  isFetching?: boolean\n  label?: string\n  rows?: number\n  variant?: ETextAreaVariants\n}\n\nexport type TTextAreaRef = HTMLDivElement\n\nconst defaultProps = {\n  color: ETextAreaColors.PRIMARY,\n  disabled: false,\n  variant: ETextAreaVariants.FILLED,\n  rows: 2,\n}\n\nconst TextArea = wrapper<TTextAreaRef, ITextAreaOwnProps>(\n  (\n    { className, color, disabled, helperText, isFetching, label, rows, variant, ...textareaProps },\n    ref\n  ) => {\n    const [isFocus, setIsFocus] = useState<boolean>(false)\n\n    return (\n      <div\n        ref={ref}\n        className={classNames(\n          styles.container,\n          variant && styles[variant],\n          color && styles[color],\n          disabled && styles.disabled,\n          isFocus && styles.isFocus,\n          isFetching && styles.isFetching,\n          className\n        )}\n      >\n        {label && <label className={styles.label}>{label}</label>}\n        <div className={styles.wrapper}>\n          <textarea\n            className={classNames(styles.textarea)}\n            disabled={disabled}\n            rows={rows}\n            onFocus={() => {\n              setIsFocus(true)\n            }}\n            onBlur={() => {\n              setIsFocus(false)\n            }}\n            {...textareaProps}\n          />\n        </div>\n        {helperText && <span className={styles.helperText}>{helperText}</span>}\n      </div>\n    )\n  }\n)\n\nTextArea.defaultProps = defaultProps\n\nexport interface ITextAreaProps extends React.ComponentProps<typeof TextArea> {}\n\nexport default TextArea\n"],"names":["ETextAreaColors","ETextAreaColors2","ETextAreaVariants","ETextAreaVariants2","defaultProps","TextArea","wrapper","className","color","disabled","helperText","isFetching","label","rows","variant","textareaProps","ref","isFocus","setIsFocus","useState","jsxs","classNames","styles","jsx","TextArea$1"],"mappings":"g0BAQO,IAAAA,GAAAC,IACLA,EAAA,QAAA,UACAA,EAAA,QAAA,UACAA,EAAA,MAAA,QAHUA,IAAAD,GAAA,CAAA,CAAA,EAMLE,GAAAC,IACLA,EAAA,SAAA,WACAA,EAAA,OAAA,SACAA,EAAA,SAAA,WAHUA,IAAAD,GAAA,CAAA,CAAA,EAkBZ,MAAAE,GAAA,CAAqB,MAAA,UACZ,SAAA,GACG,QAAA,SACD,KAAA,CAEX,EAEAC,EAAAC,GAAiB,CAAA,CAAA,UAAAC,EAAA,MAAAC,EAAA,SAAAC,EAAA,WAAAC,EAAA,WAAAC,GAAA,MAAAC,EAAA,KAAAC,GAAA,QAAAC,EAAA,GAAAC,EAAA,EAAAC,KAAA,CAKb,KAAA,CAAAC,GAAAC,CAAA,EAAAC,GAAA,SAAA,EAAA,EAEA,OAAAC,EAAA,KACE,MAAC,CAAA,IAAAJ,GACC,UAAAK,EACWC,EAAA,UACFR,GAAAQ,EAAAR,CAAA,EACkBN,GAAAc,EAAAd,CAAA,EACJC,GAAAa,EAAA,SACFL,IAAAK,EAAA,QACDX,IAAAW,EAAA,WACGf,CACrB,EACF,SAAA,CAECK,GAAAW,EAAAA,IAAA,QAAA,CAAA,UAAAD,EAAA,MAAA,SAAAV,EAAA,EAAgDW,EAAA,IAAA,MAAA,CAAA,UAAAD,EAAA,QAAA,SAAAC,EAAA,IAE/C,WAAC,CAAA,UAAAF,EAAAC,EAAA,QAAA,EACsC,SAAAb,EACrC,KAAAI,GACA,QAAA,IAAA,CAEEK,EAAA,EAAA,CAAe,EACjB,OAAA,IAAA,CAEEA,EAAA,EAAA,CAAgB,EAClB,GAAAH,EACI,CAAA,EAAA,EAERL,GAAAa,EAAAA,IAAA,OAAA,CAAA,UAAAD,EAAA,WAAA,SAAAZ,EAAA,CAC+D,CAAA,CAAA,CACjE,CAGN,EAEAL,EAAA,aAAAD,GAIA,MAAAoB,GAAAnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}