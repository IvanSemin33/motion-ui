{"version":3,"file":"index-58d08f56.js","sources":["../../src/components/ListItem/index.tsx"],"sourcesContent":["import classNames from 'classnames'\nimport { noop } from 'lodash'\n\nimport styles from './index.module.scss'\n\nimport wrapper from '../../utils/wrapper'\n\nexport enum EListItemColors {\n  PRIMARY = 'primary',\n  SECONDARY = 'secondary',\n}\n\nexport interface IListItemOwnProps extends React.HTMLAttributes<HTMLDivElement> {\n  children?: React.ReactNode\n  color?: EListItemColors\n  disabled?: boolean\n  end?: React.ReactNode\n  isFetching?: boolean\n  onClick?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n  selected?: boolean\n  start?: React.ReactNode\n  subText?: string\n}\nexport type TListItemRef = HTMLDivElement\n\nconst ListItem = wrapper<TListItemRef, IListItemOwnProps>(\n  (\n    {\n      children,\n      color,\n      disabled,\n      end,\n      isFetching,\n      onClick,\n      selected,\n      start,\n      subText,\n      className,\n      ...containerProps\n    },\n    ref\n  ) => {\n    return (\n      <div\n        ref={ref}\n        className={classNames(\n          styles.container,\n          subText && styles.withSubText,\n          onClick && styles.clickable,\n          selected && styles.selected,\n          color && styles[color],\n          disabled && styles.disabled,\n          isFetching && styles.isFetching,\n          className\n        )}\n        onClick={disabled ? noop : onClick}\n        {...containerProps}\n      >\n        {start && (\n          <div\n            className={styles.start}\n            onClick={(e) => {\n              const renderStartProps = (start as JSX.Element)?.props\n              if (renderStartProps?.onClick || renderStartProps?.onChange) {\n                e.stopPropagation()\n              }\n            }}\n          >\n            {start}\n          </div>\n        )}\n        <div className={styles.content}>\n          {children}\n          {subText && <div className={styles.subText}>{subText}</div>}\n        </div>\n        {end && (\n          <div\n            className={styles.end}\n            onClick={(e) => {\n              const renderEndProps = (end as JSX.Element)?.props\n              if (renderEndProps?.onClick || renderEndProps?.onChange) {\n                e.stopPropagation()\n              }\n            }}\n          >\n            {end}\n          </div>\n        )}\n      </div>\n    )\n  }\n)\n\nListItem.defaultProps = {\n  color: EListItemColors.PRIMARY,\n  disabled: false,\n  isFetching: false,\n  selected: false,\n}\n\nexport interface IListItemProps extends React.ComponentProps<typeof ListItem> {}\n\nexport default ListItem\n"],"names":["EListItemColors","EListItemColors2","ListItem","wrapper","children","color","disabled","end","isFetching","onClick","selected","start","subText","className","containerProps","ref","jsxs","classNames","styles","noop","jsx","e","renderStartProps","renderEndProps","ListItem$1"],"mappings":"0kBAOO,IAAAA,GAAAC,IACLA,EAAA,QAAA,UACAA,EAAA,UAAA,YAFUA,IAAAD,GAAA,CAAA,CAAA,EAkBZ,MAAAE,EAAAC,EAAiB,CAAA,CAEb,SAAAC,EACE,MAAAC,EACA,SAAAC,EACA,IAAAC,EACA,WAAAC,EACA,QAAAC,EACA,SAAAC,EACA,MAAAC,EACA,QAAAC,EACA,UAAAC,EACA,GAAAC,CACG,EAAAC,IAILC,EAAA,KACE,MAAC,CAAA,IAAAD,EACC,UAAAE,EACWC,EAAA,UACFN,GAAAM,EAAA,YACWT,GAAAS,EAAA,UACAR,GAAAQ,EAAA,SACCb,GAAAa,EAAAb,CAAA,EACEC,GAAAY,EAAA,SACFV,GAAAU,EAAA,WACEL,CACrB,EACF,QAAAP,EAAAa,EAAAA,KAAAV,EAC2B,GAAAK,EACvB,SAAA,CAEHH,GAAAS,EAAA,IACC,MAAC,CAAA,UAAAF,EAAA,MACmB,QAAAG,GAAA,CAEhB,MAAAC,EAAAX,GAAA,YAAAA,EAAA,OACAW,GAAA,MAAAA,EAAA,SAAAA,GAAA,MAAAA,EAAA,WACED,EAAA,gBAAA,CACF,EACF,SAAAV,CAEC,CAAA,EACHK,EAAA,KAAA,MAAA,CAAA,UAAAE,EAAA,QAAA,SAAA,CAGCd,EAAAQ,GAAAQ,EAAAA,IAAA,MAAA,CAAA,UAAAF,EAAA,QAAA,SAAAN,EAAA,CACoD,EAAA,EACvDL,GAAAa,EAAA,IAEE,MAAC,CAAA,UAAAF,EAAA,IACmB,QAAAG,GAAA,CAEhB,MAAAE,EAAAhB,GAAA,YAAAA,EAAA,OACAgB,GAAA,MAAAA,EAAA,SAAAA,GAAA,MAAAA,EAAA,WACEF,EAAA,gBAAA,CACF,EACF,SAAAd,CAEC,CAAA,CACH,CAAA,CAAA,CAKV,EAEAL,EAAA,aAAA,CAAwB,MAAA,UACf,SAAA,GACG,WAAA,GACE,SAAA,EAEd,EAIA,MAAAsB,EAAAtB"}