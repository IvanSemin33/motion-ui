{"version":3,"file":"index.stories-5c81d122.js","sources":["../../src/components/Tabs/index.tsx"],"sourcesContent":["import {\n  Children,\n  cloneElement,\n  HTMLAttributes,\n  isValidElement,\n  ReactElement,\n  useState,\n} from 'react'\n\nimport classNames from 'classnames'\nimport { motion } from 'framer-motion'\n\nimport styles from './index.module.scss'\n\nimport wrapper from '../../utils/wrapper'\nimport Tab, { ETabVariants, ITabProps } from '../Tab'\n\nexport type ETabsVariants = ETabVariants\nexport const ETabsVariants = ETabVariants\n\nexport type TTabsValue = string | number\n\nexport interface ITabsOwnProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, 'children' | 'onChange'> {\n  children: React.ReactNode\n  className?: string\n  isFetching?: boolean\n  onChange?: (value: TTabsValue) => void\n  value: TTabsValue\n  variant?: ETabsVariants\n}\n\nexport type TTabsRef = HTMLDivElement\n\nconst Tabs = wrapper<TTabsRef, ITabsOwnProps>(\n  ({ children, className, isFetching, value, variant, onChange, ...containerProps }, ref) => {\n    const [activeTabRef, setActiveTabRef] = useState<HTMLDivElement | null>(null)\n\n    const renderChildren = () => {\n      return Children.map(children, (child) => {\n        if (!isValidElement(child)) {\n          return null\n        }\n\n        if (child.type !== Tab) {\n          throw new Error('`Tabs` children should be of type `Tab`.')\n        }\n\n        const TabComponent = child as ReactElement<ITabProps>\n        const { props: childProps } = TabComponent\n\n        return cloneElement(TabComponent, {\n          ref: (ref: HTMLDivElement) => {\n            if (ref && childProps.value === value) {\n              setActiveTabRef(ref)\n            }\n          },\n          isFetching,\n          variant,\n          active: childProps.value === value,\n          onClick: ((e) => {\n            if (onChange && !isFetching) {\n              onChange(childProps.value)\n              setActiveTabRef(e.currentTarget)\n            }\n          }) as React.MouseEventHandler<HTMLDivElement>,\n        })\n      })\n    }\n\n    return (\n      <div ref={ref} className={classNames(styles.container, className)} {...containerProps}>\n        {renderChildren()}\n        <motion.span\n          className={styles.indicator}\n          animate={{ x: activeTabRef?.offsetLeft, width: activeTabRef?.offsetWidth }}\n          transition={{\n            duration: 0.2,\n            ease: 'easeInOut',\n          }}\n        />\n      </div>\n    )\n  }\n)\n\nTabs.defaultProps = {\n  variant: ETabsVariants.DEFAULT,\n}\n\nexport interface ITabssProps extends React.ComponentProps<typeof Tabs> {}\n\nexport default Tabs\n"],"names":["ETabsVariants","ETabVariants","Tabs","wrapper","children","className","isFetching","value","variant","onChange","containerProps","ref","activeTabRef","setActiveTabRef","useState","renderChildren","Children","child","isValidElement","Tab","TabComponent","childProps","cloneElement","ref2","e","jsxs","classNames","styles","jsx","motion"],"mappings":"igBAkBOA,EAAAC,GAgBPC,EAAAC,EAAa,CAAA,CAAA,SAAAC,EAAA,UAAAC,EAAA,WAAAC,EAAA,MAAAC,EAAA,QAAAC,EAAA,SAAAC,EAAA,GAAAC,CAAA,EAAAC,IAAA,CAET,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,IAAA,EAEAC,EAAA,IACEC,WAAA,IAAAZ,EAAAa,GAAA,CACE,GAAA,CAAAC,EAAAA,eAAAD,CAAA,EACE,OAAA,KAGF,GAAAA,EAAA,OAAAE,EACE,MAAA,IAAA,MAAA,0CAAA,EAGF,MAAAC,EAAAH,EACA,CAAA,MAAAI,CAAA,EAAAD,EAEA,OAAAE,EAAAA,aAAAF,EAAA,CAAkC,IAAAG,GAAA,CAE9BA,GAAAF,EAAA,QAAAd,GACEM,EAAAU,CAAA,CACF,EACF,WAAAjB,EACA,QAAAE,EACA,OAAAa,EAAA,QAAAd,EAC6B,QAAAiB,GAAA,CAE3Bf,GAAA,CAAAH,IACEG,EAAAY,EAAA,KAAA,EACAR,EAAAW,EAAA,aAAA,EACF,CACF,CAAA,CACD,CAAA,EAIL,OAAAC,OAAA,MAAA,CAAA,IAAAd,EAAA,UAAAe,EAAAC,EAAA,UAAAtB,CAAA,EAAA,GAAAK,EAAA,SAAA,CAEKK,EAAA,EAAea,EAAA,IAChBC,EAAA,KAAQ,CAAP,UAAAF,EAAA,UACmB,QAAA,CAAA,EAAAf,GAAA,YAAAA,EAAA,WAAA,MAAAA,GAAA,YAAAA,EAAA,WAAA,EACuD,WAAA,CAC7D,SAAA,GACA,KAAA,WACJ,CACR,CAAA,CACF,CAAA,CAAA,CACF,CAGN,EAEAV,EAAA,aAAA,CAAoB,QAAAF,EAAA,OAEpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}