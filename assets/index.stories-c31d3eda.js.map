{"version":3,"file":"index.stories-c31d3eda.js","sources":["../../src/constants/files.ts","../../src/utils/files.ts","../../src/components/Upload/UploadItem/index.tsx","../../src/components/Upload/index.tsx"],"sourcesContent":["export enum EFileImageFormats {\n  JPG = 'jpg',\n  JPEG = 'jpeg',\n  PNG = 'png',\n  GIF = 'gif',\n  BMP = 'bmp',\n  ICO = 'ico',\n  SVG = 'svg',\n  TIFF = 'tiff',\n  WEBP = 'webp',\n}\n\nexport const FILE_IMAGE_FORMATS = Object.values(EFileImageFormats)\n","/**\n * @description Convert FileList to Array\n * @param files FileList | undefined | null\n * @return File[]\n */\nexport const fileListToArray = (files?: FileList | null): File[] => {\n  if (!files) {\n    return [];\n  }\n\n  return Array.from(files);\n};\n\n/**\n * @description Convert Array to FileList\n * @param files File[]\n * @return FileList\n * @example\n * const files = fileListToArray(event.target.files)\n * const fileList = arrayToFileList(files)\n **/\nexport const arrayToFileList = (files: File[]): FileList => {\n  const dataTransfer = new DataTransfer();\n\n  files.forEach((file) => dataTransfer.items.add(file));\n\n  return dataTransfer.files;\n};\n\n/**\n * @description Check file format\n * @param file File\n * @param formats string[]\n * @return boolean\n * @example\n * import { FILE_IMAGE_FORMATS } from '@motion-ui/design-system/constants'\n * const isCorrectFormat = checkFileFormat(file, FILE_IMAGE_FORMATS)\n **/\nexport const checkFileFormat = (file: File, formats: string[]): boolean => {\n  const fileFormat = file.type.split(\"/\")[1];\n\n  return formats.includes(fileFormat);\n};\n\n/**\n * @description Check file size\n * @param file File\n * @param size number\n * @return boolean\n * @example\n * const size = 1024 * 1024 * 5 // 5MB\n * const isCorrectSize = checkFileSize(file, size)\n * @note\n * 1MB = 1024 * 1024 * 1B\n **/\nexport const checkFileSize = (file: File, size: number): boolean => {\n  return file.size <= size;\n};\n","import { Fragment, useState } from \"react\";\n\nimport classNames from \"classnames\";\nimport { AnimatePresence, DragHandlers, motion } from \"framer-motion\";\n\nimport {\n  GoTrash as DeleteOutlineIcon,\n  GoFileMedia as PhotoIcon,\n} from \"react-icons/go\";\n\nimport styles from \"./index.module.scss\";\n\nimport wrapper from \"../../../utils/wrapper\";\nimport CircularProgress, {\n  ECircularProgressSize,\n} from \"../../CircularProgress\";\nimport { TFile } from \"..\";\n\nexport enum EUploadItemType {\n  FILE = \"file\",\n  IMAGE = \"image\",\n}\n\nexport interface IUploadItemOwnProps {\n  file: TFile;\n  type: EUploadItemType;\n  onDelete: (file: TFile) => void;\n  onSelect: (file: TFile) => void;\n  onDeselect: (file: TFile) => void;\n  selected: boolean;\n  selectable: boolean;\n  mainLabel?: string;\n  onDragStart?: DragHandlers[\"onDragStart\"];\n  onDrop?: React.DragEventHandler<HTMLDivElement>;\n}\n\nexport type TUploadItemRef = HTMLDivElement;\n\nconst UploadItem = wrapper<TUploadItemRef, IUploadItemOwnProps>(\n  (\n    {\n      file,\n      type,\n      onDelete,\n      onSelect,\n      selected,\n      onDeselect,\n      selectable,\n      mainLabel,\n      onDragStart,\n      onDrop,\n    },\n    ref\n  ) => {\n    const { file: localFile, url, id, loading } = file;\n    const isLocal = !!localFile && !url;\n    const fileSrc = isLocal ? URL.createObjectURL(localFile) : url;\n\n    const [hovered, setHovered] = useState(false);\n\n    const renderImage = () => (\n      <Fragment>\n        <img src={fileSrc} alt={id} className={styles.image} />\n        {mainLabel && <div className={styles.mainLabel}>{mainLabel}</div>}\n        {loading && (\n          <div className={styles.loader}>\n            <CircularProgress size={ECircularProgressSize.SMALL} />\n          </div>\n        )}\n        <AnimatePresence>\n          {hovered && (\n            <motion.div\n              className={styles.delete}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n            >\n              <DeleteOutlineIcon size={20} onClick={() => onDelete(file)} />\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </Fragment>\n    );\n\n    const renderFile = () => (\n      <Fragment>\n        {loading ? (\n          <CircularProgress className={styles.loader} />\n        ) : (\n          <PhotoIcon className={styles.icon} />\n        )}\n        <div className={styles.name}>{id}</div>\n        <DeleteOutlineIcon\n          className={styles.delete}\n          onClick={() => onDelete(file)}\n        />\n      </Fragment>\n    );\n\n    return (\n      <motion.div\n        ref={ref}\n        id={id}\n        className={classNames(\n          styles.container,\n          type === EUploadItemType.FILE ? styles.typeFile : styles.typeImage,\n          hovered && styles.hovered,\n          selectable && styles.selectable,\n          selected && styles.selected,\n          loading && styles.loading\n        )}\n        onMouseEnter={() => setHovered(true)}\n        onMouseLeave={() => setHovered(false)}\n        draggable\n        onDragStart={onDragStart}\n        onDrop={onDrop}\n        onDragOver={(e) => e.preventDefault()}\n        onClick={() => {\n          if (selected) {\n            onDeselect(file);\n          } else {\n            onSelect(file);\n          }\n        }}\n      >\n        {type === EUploadItemType.IMAGE ? renderImage() : renderFile()}\n      </motion.div>\n    );\n  }\n);\n\nUploadItem.defaultProps = {};\n\nexport interface IUploadItemProps\n  extends React.ComponentProps<typeof UploadItem> {}\n\nexport default UploadItem;\n","import {\n  ChangeEvent,\n  DragEvent,\n  Fragment,\n  HTMLAttributes,\n  useRef,\n  useState,\n} from \"react\";\n\nimport classNames from \"classnames\";\nimport { isArray } from \"lodash\";\n\nimport {\n  GoPlus as AddIcon,\n  GoDownload as CloudUploadIcon,\n} from \"react-icons/go\";\n\nimport styles from \"./index.module.scss\";\n\nimport { checkFileFormat, checkFileSize, fileListToArray } from \"../../utils\";\nimport wrapper from \"../../utils/wrapper\";\nimport Button, { EButtonColors, EButtonVariants } from \"../Button\";\nimport IconButton, {\n  EIconButtonColors,\n  EIconButtonVariants,\n} from \"../IconButton\";\n\nimport UploadItem, { EUploadItemType, IUploadItemProps } from \"./UploadItem\";\n\nexport type TFile = {\n  id: string;\n  file?: File;\n  loading?: boolean;\n  url?: string;\n};\n\nexport type TUploadValue = TFile[];\n\nexport type EUploadType = EUploadItemType;\nexport const EUploadType = EUploadItemType;\n\nexport interface IUploadOwnProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, \"onChange\" | \"onSelect\"> {\n  buttonText?: string;\n  description?: string;\n  disabled?: boolean;\n  format?: string[];\n  isFetching?: boolean;\n  label?: string;\n  multiple?: boolean;\n  onChange?: (value: TUploadValue) => void;\n  onSelect?: (value: TUploadValue) => void;\n  selected?: TUploadValue;\n  size?: number;\n  type?: EUploadType;\n  value: TUploadValue;\n  mainLabel?: string;\n}\n\nexport type TUploadRef = HTMLDivElement;\n\nconst Upload = wrapper<TUploadRef, IUploadOwnProps>(\n  (\n    {\n      buttonText,\n      className,\n      description,\n      disabled,\n      format,\n      isFetching,\n      label,\n      multiple,\n      onChange,\n      onSelect,\n      selected,\n      size,\n      type,\n      value,\n      mainLabel,\n      ...cotainerProps\n    },\n    ref\n  ) => {\n    const [dragActive, setDragActive] = useState(false);\n\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const [dragId, setDragId] = useState<string | null>(null);\n\n    const onDragStart: IUploadItemProps[\"onDragStart\"] = (event) => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const id = event.currentTarget?.id;\n      setDragId(id);\n    };\n\n    const onDrop: IUploadItemProps[\"onDrop\"] = (event) => {\n      event.preventDefault();\n\n      const dropId = event.currentTarget.id || null;\n\n      if (dropId && onChange) {\n        const dropIndex = value.findIndex((item) => item.id === dropId);\n        const dragIndex = value.findIndex((item) => item.id === dragId);\n\n        if (dropIndex !== dragIndex) {\n          const newValue = [...value];\n          const [dragItem] = newValue.splice(dragIndex, 1);\n          newValue.splice(dropIndex, 0, dragItem);\n          onChange(newValue);\n        }\n      }\n      // setDraggingId(null)\n    };\n\n    const getValidFiles = (files: TUploadValue): TUploadValue => {\n      if (size || format?.length) {\n        return files.filter(({ file }) => {\n          if (!file) {\n            return true;\n          }\n\n          if (size) {\n            return checkFileSize(file, size);\n          }\n          if (format?.length) {\n            return checkFileFormat(file, format);\n          }\n          return true;\n        });\n      }\n\n      return files;\n    };\n\n    const handleChange = (files: TUploadValue) => {\n      if (onChange) {\n        const validFiles = getValidFiles(files);\n        onChange(validFiles);\n      }\n    };\n\n    const handleDrag = (e: DragEvent<HTMLDivElement>) => {\n      if (disabled) {\n        return;\n      }\n\n      e.preventDefault();\n      e.stopPropagation();\n      if (e.type === \"dragenter\" || e.type === \"dragover\") {\n        setDragActive(true);\n      } else if (e.type === \"dragleave\") {\n        setDragActive(false);\n      }\n    };\n\n    const handleDrop = (e: DragEvent<HTMLDivElement>) => {\n      if (disabled) {\n        return;\n      }\n\n      e.preventDefault();\n      e.stopPropagation();\n      setDragActive(false);\n\n      if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n        const files: TUploadValue = fileListToArray(e.dataTransfer.files).map(\n          (file) => ({\n            id: file.name,\n            file,\n          })\n        );\n\n        handleChange(files);\n      }\n    };\n\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n      if (disabled) {\n        return;\n      }\n\n      e.preventDefault();\n      if (e.target.files && e.target.files[0]) {\n        const files: TUploadValue = fileListToArray(e.target.files).map(\n          (file) => ({\n            id: file.name,\n            file,\n          })\n        );\n\n        handleChange(files);\n      }\n    };\n\n    const onButtonClick = () => {\n      if (!disabled && inputRef.current) {\n        inputRef.current.value = \"\";\n        inputRef.current.click();\n      }\n    };\n\n    const isSelectable = !!onSelect && isArray(selected);\n    const isMinimal = !!value.length && type === EUploadType.IMAGE;\n\n    const renderUploadArea = () => (\n      <div\n        ref={ref}\n        className={classNames(\n          styles.upload,\n          dragActive && styles.draging,\n          isMinimal && styles.minimal\n        )}\n        onDragEnter={handleDrag}\n        onSubmit={(e) => e.preventDefault()}\n        onDragLeave={handleDrag}\n        onDragOver={handleDrag}\n        onDrop={handleDrop}\n      >\n        <input\n          id=\"input-file-upload\"\n          ref={inputRef}\n          className={styles.input}\n          type=\"file\"\n          multiple={multiple}\n          onChange={onChangeInput}\n          disabled={disabled}\n          accept={format?.join(\",\")}\n        />\n        <label className={styles.label} htmlFor=\"input-file-upload\">\n          <CloudUploadIcon className={styles.icon} />\n          <div className={styles.labelText}>{label}</div>\n          <div className={styles.description}>{description}</div>\n          {isMinimal ? (\n            <IconButton\n              Icon={AddIcon}\n              className={styles.button}\n              onClick={onButtonClick}\n              variant={EIconButtonVariants.LINK}\n              color={EIconButtonColors.SECONDARY}\n              disabled={disabled}\n            />\n          ) : (\n            <Button\n              className={styles.button}\n              onClick={onButtonClick}\n              variant={EButtonVariants.LINK}\n              color={EButtonColors.PRIMARY}\n              disabled={disabled}\n            >\n              {buttonText}\n            </Button>\n          )}\n        </label>\n      </div>\n    );\n\n    const renderFiles = () => (\n      <div className={styles.files}>\n        {isMinimal && renderUploadArea()}\n        {value.map((fileObj, i) => {\n          const isSelected =\n            isSelectable && !!selected?.some((f) => f.id === fileObj.id);\n          // FIXME: not working with selectable\n          const isMain = i === 0;\n\n          return (\n            <UploadItem\n              file={fileObj}\n              key={fileObj.id}\n              type={type || EUploadType.FILE}\n              onDelete={(deletedFile) => {\n                const newFiles = value.filter((f) => f.id !== deletedFile.id);\n                handleChange(newFiles);\n              }}\n              selectable={isSelectable}\n              selected={isSelected}\n              onDeselect={(deselectedFile) => {\n                if (isSelectable) {\n                  const newFiles = selected.filter(\n                    (f) => f.id !== deselectedFile.id\n                  );\n                  onSelect(newFiles);\n                }\n              }}\n              onSelect={(selectedFile) => {\n                if (isSelectable) {\n                  onSelect([...selected, selectedFile]);\n                }\n              }}\n              mainLabel={isMain ? mainLabel : undefined}\n              onDragStart={onDragStart}\n              onDrop={onDrop}\n            />\n          );\n        })}\n      </div>\n    );\n\n    const renderTypeImage = () => {\n      if (isMinimal) {\n        return renderFiles();\n      } else {\n        return renderUploadArea();\n      }\n    };\n\n    const renderTypeIFile = () => (\n      <Fragment>\n        {renderUploadArea()}\n        {renderFiles()}\n      </Fragment>\n    );\n\n    return (\n      <div\n        className={classNames(\n          styles.container,\n          className,\n          type === EUploadType.IMAGE ? styles.typeImage : styles.typeFile,\n          isFetching && styles.isFetching,\n          disabled && styles.disabled\n        )}\n        {...cotainerProps}\n      >\n        {type === EUploadType.IMAGE ? renderTypeImage() : renderTypeIFile()}\n      </div>\n    );\n  }\n);\n\nUpload.defaultProps = {\n  disabled: false,\n  isFetching: false,\n  multiple: false,\n  type: EUploadType.FILE,\n};\n\nexport interface IUploadProps extends React.ComponentProps<typeof Upload> {}\n\nexport default Upload;\n"],"names":["EFileImageFormats","FILE_IMAGE_FORMATS","fileListToArray","files","checkFileFormat","file","formats","fileFormat","checkFileSize","size","EUploadItemType","EUploadItemType2","UploadItem","wrapper","type","onDelete","onSelect","selected","onDeselect","selectable","mainLabel","onDragStart","onDrop","ref","localFile","url","id","loading","fileSrc","hovered","setHovered","useState","renderImage","jsxs","Fragment","jsx","styles","CircularProgress","ECircularProgressSize","AnimatePresence","motion","DeleteOutlineIcon","renderFile","PhotoIcon","classNames","e","EUploadType","Upload","buttonText","className","description","disabled","format","isFetching","label","multiple","onChange","value","cotainerProps","dragActive","setDragActive","inputRef","useRef","dragId","setDragId","event","_a","dropId","dropIndex","item","dragIndex","newValue","dragItem","getValidFiles","handleChange","validFiles","handleDrag","handleDrop","onChangeInput","onButtonClick","isSelectable","isArray","isMinimal","renderUploadArea","CloudUploadIcon","IconButton","AddIcon","EIconButtonVariants","EIconButtonColors","Button","EButtonVariants","EButtonColors","renderFiles","fileObj","i","isSelected","f","isMain","deletedFile","newFiles","deselectedFile","selectedFile","renderTypeImage","renderTypeIFile"],"mappings":"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"}